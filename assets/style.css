/*
  Oh Hello!

  These are some base styles so that our tutorial looks good.

  Let's go through the important bits real quick
*/
:root {
  --yellow: #ffc600;
  --black: #272727;
}

html {
  /* border-box box model allows us to add padding and border to our elements without increasing their size */
  box-sizing: border-box;
  /* A system font stack so things load nice and quick! */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: 900;
  font-size: 10px;
  color: var(--black);
  text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);
}

/*
  WAT IS THIS?!
  We inherit box-sizing: border-box; from our <html> selector
  Apparently this is a bit better than applying box-sizing: border-box; directly to the * selector
*/
*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  background-image: url("./images/topography.svg"),
    linear-gradient(110deg, #f93d66, #6d47d9);
  background-size: 340px, auto;
  min-height: calc(100vh - 100px);
  margin: 50px;
  /* background: white; */
  background-position: fixed;
  letter-spacing: -1px;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0 0 5px 0;
}
/* Each item in our grid will contain numbers */
.item {
  /* We center the contents of these items. You can also do this with flexbox too! */
  display: grid;
  justify-content: center;
  align-items: center;
  border: 5px solid rgba(0, 0, 0, 0.03);
  border-radius: 3px;
  font-size: 35px;
  background-color: #ffc600; /* best colour */
}

.item p {
  margin: 0 0 5px 0;
}


.container {
  /*border: 10px solid var(--yellow);*/
  display: grid;
  grid-gap: 10px;

  /* this will tell how many, explicit, columns and its size */
  /*grid-template-columns: repeat(auto-fill, 150px);*/

  /* this will tell how many, explicit, rows and its size */
  /*grid-template-rows: 200px 100px;*/
  /* uses of repeat: */
  /* repeat (12, 150px) = explicit number of repeats*/
  /* repeat (auto-fill, 150px) = will slice the row in as many items fit */
  /* repeat (auto-fit, 150px) = similar to auto-fill, but it will you will have only the spaces needed */
  /* columns/rows naming */
  /* You give names to columns/rows */
  /* grid-template-columns: [sidebar-1-start] 1fr [content-start] 500px [sidebar-2-start] 1fr; */
  /*.item1 {*/
    /*grid-column: sidebar-1-start / content-start;*/
  /*}*/
  /* You give can also give multiple names */
  /*grid-template-columns: [sidebar-1-start] 1fr [sidebar-1-end content-start] 500px [content-end sidebar-2-start] 1fr;*/
  /*.item1 {*/
    /*grid-column: sidebar-1-start / sidebar-1-end;*/
  /*}*/

  /* fit-content(300px) */
  /* is just like auto but with a max value */

  /* this will give size to rows/columns that are out of grid-template- */
  /*grid-auto-rows: 200px;*/

  /*grid-auto-columns: 200px;*/

  /* This will put in a new row (default) or column the grid items that are outside explicit grid-template- */
  /*grid-auto-flow: (row/column/dense);*/

  /* This will give size to new grid items outside explicit grid-template- */
  /*grid-auto-columns: 200px;*/
  /*grid-auto-rows: 200px;*/


  /* This will say to a grid item to take more slots */
  /* note: if the grid is 5 columns width and you say, e.g. grid-column: span 6, the grid will grow as needed*/
  /*grid-column: span 3;*/
  /*grid-row: span 2;*/

  /* This will place a grid item (same applies to grid-row)*/
  /*grid-column-start: 2;*/
  /*grid-column-end: 4;*/
  /* which is the same than */
  /*grid-column: 2 / 4;*/
  /*grid-column: 2 / span 2;*/
  /* also you can say how many to span and where to end: */
  /*grid-column: span 2 / 4;*/
  /* kind of width 100% */
  /*grid-column: 1 / -1;*/

  /* Define areas according to columns and rows and  */
  /*grid-template-areas: "sidebar-1 content sidebar-2";*/
  /* To add an area instead of individual size */
  /*.item1 {*/
    /*grid-area: container;*/
  /*}*/
  /* You can also use areas to define individual position */
  /* Using areaName-start and areaName-end */
  /*.item1 {*/
    /*grid-column: container-start / container-end;*/
  /*}*/

  /* Center Items */
  /* align-* is for column axis */
  /* justify-* is for row axis */
  /* In grid we have place-items as a shorthand prop */
  /* place-items: align-items justify-items */
  /*.container {*/
    /*justify-items: center;*/
    /*align-items: center;*/
    /*place-items: center center;*/
  /*}*/
}